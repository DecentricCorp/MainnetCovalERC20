{
  "contractName": "FinalizableCrowdsale",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "hasClosed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "weiRaised",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closingTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "rate",
          "type": "uint256"
        },
        {
          "name": "wallet",
          "type": "address"
        },
        {
          "name": "token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "openingTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "openingTime",
          "type": "uint256"
        },
        {
          "name": "closingTime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CrowdsaleFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "prevClosingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "newClosingTime",
          "type": "uint256"
        }
      ],
      "name": "TimedCrowdsaleExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610fa2806100206000396000f3fe6080604052600436106100fa576000357c0100000000000000000000000000000000000000000000000000000000900480638129fc1c1161009c578063b7a8807c11610076578063b7a8807c14610313578063e4a301161461033e578063ec8ac4d814610383578063fc0c546a146103c7576100fa565b80638129fc1c14610252578063b3f05b9714610269578063b4988fd014610298576100fa565b806347535d7b116100d857806347535d7b1461018a5780634b6753bc146101b95780634bb278f3146101e4578063521eb273146101fb576100fa565b80631515bc2b146101055780632c4e722e146101345780634042b66f1461015f575b6101033361041e565b005b34801561011157600080fd5b5061011a610516565b604051808215151515815260200191505060405180910390f35b34801561014057600080fd5b50610149610522565b6040518082815260200191505060405180910390f35b34801561016b57600080fd5b5061017461052c565b6040518082815260200191505060405180910390f35b34801561019657600080fd5b5061019f610536565b604051808215151515815260200191505060405180910390f35b3480156101c557600080fd5b506101ce610551565b6040518082815260200191505060405180910390f35b3480156101f057600080fd5b506101f961055b565b005b34801561020757600080fd5b506102106105db565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025e57600080fd5b50610267610605565b005b34801561027557600080fd5b5061027e6106ff565b604051808215151515815260200191505060405180910390f35b3480156102a457600080fd5b50610311600480360360608110156102bb57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610716565b005b34801561031f57600080fd5b5061032861091b565b6040518082815260200191505060405180910390f35b34801561034a57600080fd5b506103816004803603604081101561036157600080fd5b810190808035906020019092919080359060200190929190505050610925565b005b6103c56004803603602081101561039957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061041e565b005b3480156103d357600080fd5b506103dc610a54565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60016033600082825401925050819055506000603354905060003490506104458382610a7e565b600061045082610a9f565b905061046782606954610abd90919063ffffffff16565b6069819055506104778482610ade565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a36104ee8483610aec565b6104f6610af0565b6105008483610b5b565b50506033548114151561051257600080fd5b5050565b6000609d544211905090565b6000606854905090565b6000606954905090565b6000609c54421015801561054c5750609d544211155b905090565b6000609d54905090565b60d060009054906101000a900460ff1615151561057757600080fd5b61057f610516565b151561058a57600080fd5b600160d060006101000a81548160ff0219169083151502179055506105ad610b5f565b7f9270cc390c096600a1c17c44345a1ba689fafd99d97487b10cfccf86cf73183660405160405180910390a1565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff16806106245750610623610b61565b5b8061063b57506000809054906101000a900460ff16155b1515610692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f49602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550600160338190555080600060016101000a81548160ff02191690831515021790555050565b600060d060009054906101000a900460ff16905090565b600060019054906101000a900460ff16806107355750610734610b61565b5b8061074c57506000809054906101000a900460ff16155b15156107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f49602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055506000841115156107fa57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561083657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561087257600080fd5b8360688190555082606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600060016101000a81548160ff02191690831515021790555050505050565b6000609c54905090565b600060019054906101000a900460ff16806109445750610943610b61565b5b8061095b57506000809054906101000a900460ff16155b15156109b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f49602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550610a02610b72565b1515610a0a57fe5b428310151515610a1957600080fd5b8282111515610a2757600080fd5b82609c8190555081609d8190555080600060016101000a81548160ff021916908315150217905550505050565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a86610536565b1515610a9157600080fd5b610a9b8282610c34565b5050565b6000610ab660685483610c8490919063ffffffff16565b9050919050565b6000808284019050838110151515610ad457600080fd5b8091505092915050565b610ae88282610cc2565b5050565b5050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610b58573d6000803e3d6000fd5b50565b5050565b565b600080303b90506000811491505090565b600080606854118015610bd45750600073ffffffffffffffffffffffffffffffffffffffff16606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b8015610c2f5750600073ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610c7057600080fd5b60008114151515610c8057600080fd5b5050565b600080831415610c975760009050610cbc565b60008284029050828482811515610caa57fe5b04141515610cb757600080fd5b809150505b92915050565b610d0f8282606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d139092919063ffffffff16565b5050565b610dfb838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb90507c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e00565b505050565b610e1f8273ffffffffffffffffffffffffffffffffffffffff16610f35565b1515610e2a57600080fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083101515610e7b5780518252602082019150602081019050602083039250610e56565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610edd576040519150601f19603f3d011682016040523d82523d6000602084013e610ee2565b606091505b5091509150811515610ef357600080fd5b600081511115610f2f57808060200190516020811015610f1257600080fd5b81019080805190602001909291905050501515610f2e57600080fd5b5b50505050565b600080823b90506000811191505091905056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a723058204b7e9f89731d25369841d8c6e4a6f6874e5ba56c6188d7df756d78c67a202bae0029",
  "deployedBytecode": "0x6080604052600436106100fa576000357c0100000000000000000000000000000000000000000000000000000000900480638129fc1c1161009c578063b7a8807c11610076578063b7a8807c14610313578063e4a301161461033e578063ec8ac4d814610383578063fc0c546a146103c7576100fa565b80638129fc1c14610252578063b3f05b9714610269578063b4988fd014610298576100fa565b806347535d7b116100d857806347535d7b1461018a5780634b6753bc146101b95780634bb278f3146101e4578063521eb273146101fb576100fa565b80631515bc2b146101055780632c4e722e146101345780634042b66f1461015f575b6101033361041e565b005b34801561011157600080fd5b5061011a610516565b604051808215151515815260200191505060405180910390f35b34801561014057600080fd5b50610149610522565b6040518082815260200191505060405180910390f35b34801561016b57600080fd5b5061017461052c565b6040518082815260200191505060405180910390f35b34801561019657600080fd5b5061019f610536565b604051808215151515815260200191505060405180910390f35b3480156101c557600080fd5b506101ce610551565b6040518082815260200191505060405180910390f35b3480156101f057600080fd5b506101f961055b565b005b34801561020757600080fd5b506102106105db565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025e57600080fd5b50610267610605565b005b34801561027557600080fd5b5061027e6106ff565b604051808215151515815260200191505060405180910390f35b3480156102a457600080fd5b50610311600480360360608110156102bb57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610716565b005b34801561031f57600080fd5b5061032861091b565b6040518082815260200191505060405180910390f35b34801561034a57600080fd5b506103816004803603604081101561036157600080fd5b810190808035906020019092919080359060200190929190505050610925565b005b6103c56004803603602081101561039957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061041e565b005b3480156103d357600080fd5b506103dc610a54565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60016033600082825401925050819055506000603354905060003490506104458382610a7e565b600061045082610a9f565b905061046782606954610abd90919063ffffffff16565b6069819055506104778482610ade565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a36104ee8483610aec565b6104f6610af0565b6105008483610b5b565b50506033548114151561051257600080fd5b5050565b6000609d544211905090565b6000606854905090565b6000606954905090565b6000609c54421015801561054c5750609d544211155b905090565b6000609d54905090565b60d060009054906101000a900460ff1615151561057757600080fd5b61057f610516565b151561058a57600080fd5b600160d060006101000a81548160ff0219169083151502179055506105ad610b5f565b7f9270cc390c096600a1c17c44345a1ba689fafd99d97487b10cfccf86cf73183660405160405180910390a1565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff16806106245750610623610b61565b5b8061063b57506000809054906101000a900460ff16155b1515610692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f49602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550600160338190555080600060016101000a81548160ff02191690831515021790555050565b600060d060009054906101000a900460ff16905090565b600060019054906101000a900460ff16806107355750610734610b61565b5b8061074c57506000809054906101000a900460ff16155b15156107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f49602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055506000841115156107fa57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561083657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561087257600080fd5b8360688190555082606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600060016101000a81548160ff02191690831515021790555050505050565b6000609c54905090565b600060019054906101000a900460ff16806109445750610943610b61565b5b8061095b57506000809054906101000a900460ff16155b15156109b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f49602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550610a02610b72565b1515610a0a57fe5b428310151515610a1957600080fd5b8282111515610a2757600080fd5b82609c8190555081609d8190555080600060016101000a81548160ff021916908315150217905550505050565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a86610536565b1515610a9157600080fd5b610a9b8282610c34565b5050565b6000610ab660685483610c8490919063ffffffff16565b9050919050565b6000808284019050838110151515610ad457600080fd5b8091505092915050565b610ae88282610cc2565b5050565b5050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610b58573d6000803e3d6000fd5b50565b5050565b565b600080303b90506000811491505090565b600080606854118015610bd45750600073ffffffffffffffffffffffffffffffffffffffff16606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b8015610c2f5750600073ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610c7057600080fd5b60008114151515610c8057600080fd5b5050565b600080831415610c975760009050610cbc565b60008284029050828482811515610caa57fe5b04141515610cb757600080fd5b809150505b92915050565b610d0f8282606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d139092919063ffffffff16565b5050565b610dfb838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb90507c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e00565b505050565b610e1f8273ffffffffffffffffffffffffffffffffffffffff16610f35565b1515610e2a57600080fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083101515610e7b5780518252602082019150602081019050602083039250610e56565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610edd576040519150601f19603f3d011682016040523d82523d6000602084013e610ee2565b606091505b5091509150811515610ef357600080fd5b600081511115610f2f57808060200190516020811015610f1257600080fd5b81019080805190602001909291905050501515610f2e57600080fd5b5b50505050565b600080823b90506000811191505091905056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a723058204b7e9f89731d25369841d8c6e4a6f6874e5ba56c6188d7df756d78c67a202bae0029",
  "sourceMap": "308:1017:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;308:1017:8;;;;;;;",
  "deployedSourceMap": "308:1017:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2954:21:7;2964:10;2954:9;:21::i;:::-;308:1017:8;2052:156:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2052:156:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3365:75:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3365:75:7;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3503:85;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3503:85:7;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1699:189:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1699:189:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1525:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1525:89:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;797:183:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;797:183:8;;;:::i;:::-;;3193:87:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3193:87:7;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;451:214:69;;8:9:-1;5:2;;;30:1;27;20:12;5:2;451:214:69;;;:::i;:::-;;557:82:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;557:82:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2342:284:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2342:284:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2342:284:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1371:89:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1371:89:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;948:358;;8:9:-1;5:2;;;30:1;27;20:12;5:2;948:358:18;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;948:358:18;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3845:603:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3845:603:7;;;;;;;;;;;;;;;;;;;:::i;:::-;;3041:76;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3041:76:7;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3845:603;1091:1:69;1074:13;;:18;;;;;;;;;;;1102:20;1125:13;;1102:36;;3923:17:7;3943:9;3923:29;;3962:44;3983:11;3996:9;3962:20;:44::i;:::-;4065:14;4082:26;4098:9;4082:15;:26::i;:::-;4065:43;;4156:25;4171:9;4156:10;;:14;;:25;;;;:::i;:::-;4143:10;:38;;;;4192:37;4209:11;4222:6;4192:16;:37::i;:::-;4272:11;4244:59;;4260:10;4244:59;;;4285:9;4296:6;4244:59;;;;;;;;;;;;;;;;;;;;;;;;4314:46;4337:11;4350:9;4314:22;:46::i;:::-;4371:15;:13;:15::i;:::-;4396:45;4418:11;4431:9;4396:21;:45::i;:::-;1148:1:69;;1183:13;;1167:12;:29;1159:38;;;;;;;;3845:603:7;;:::o;2052:156:18:-;2094:4;2189:12;;2171:15;:30;2164:37;;2052:156;:::o;3365:75:7:-;3402:7;3428:5;;3421:12;;3365:75;:::o;3503:85::-;3545:7;3571:10;;3564:17;;3503:85;:::o;1699:189:18:-;1738:4;1834:12;;1815:15;:31;;:66;;;;;1869:12;;1850:15;:31;;1815:66;1808:73;;1699:189;:::o;1525:89::-;1569:7;1595:12;;1588:19;;1525:89;:::o;797:183:8:-;843:10;;;;;;;;;;;842:11;834:20;;;;;;;;872:11;:9;:11::i;:::-;864:20;;;;;;;;908:4;895:10;;:17;;;;;;;;;;;;;;;;;;923:15;:13;:15::i;:::-;953:20;;;;;;;;;;797:183::o;3193:87:7:-;3232:15;3266:7;;;;;;;;;;;3259:14;;3193:87;:::o;451:214:69:-;1024:12:70;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;657:1:69;641:13;:17;;;;1243:15:70;1228:12;;:30;;;;;;;;;;;;;;;;;;451:214:69;:::o;557:82:8:-;599:4;622:10;;;;;;;;;;;615:17;;557:82;:::o;2342:284:7:-;1024:12:70;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;2458:1:7;2451:4;:8;2443:17;;;;;;;;2496:1;2478:20;;:6;:20;;;;2470:29;;;;;;;;2543:1;2517:28;;2525:5;2517:28;;;;2509:37;;;;;;;;2565:4;2557:5;:12;;;;2589:6;2579:7;;:16;;;;;;;;;;;;;;;;;;2614:5;2605:6;;:14;;;;;;;;;;;;;;;;;;1243:15:70;1228:12;;:30;;;;;;;;;;;;;;;;;;2342:284:7;;;;:::o;1371:89:18:-;1415:7;1441:12;;1434:19;;1371:89;:::o;948:358::-;1024:12:70;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;1046:31:18;:29;:31::i;:::-;1039:39;;;;;;1166:15;1151:11;:30;;1143:39;;;;;;;;1214:11;1200;:25;1192:34;;;;;;;;1252:11;1237:12;:26;;;;1288:11;1273:12;:26;;;;1243:15:70;1228:12;;:30;;;;;;;;;;;;;;;;;;948:358:18;;;:::o;3041:76:7:-;3079:6;3104;;;;;;;;;;;3097:13;;3041:76;:::o;2532:165:18:-;733:8;:6;:8::i;:::-;725:17;;;;;;;;2640:50;2667:11;2680:9;2640:26;:50::i;:::-;2532:165;;:::o;7248:120:7:-;7315:7;7341:20;7355:5;;7341:9;:13;;:20;;;;:::i;:::-;7334:27;;7248:120;;;:::o;1439:145:34:-;1497:7;1516:9;1532:1;1528;:5;1516:17;;1556:1;1551;:6;;1543:15;;;;;;;;1576:1;1569:8;;;1439:145;;;;:::o;6450:134:7:-;6537:40;6552:11;6565;6537:14;:40::i;:::-;6450:134;;:::o;6854:145::-;;;:::o;7455:78::-;7499:7;;;;;;;;;;;:16;;:27;7516:9;7499:27;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7499:27:7;7455:78::o;5618:149::-;;;:::o;1189:98:8:-;:::o;1349:467:70:-;1396:4;1737:10;1782:7;1770:20;1764:26;;1810:1;1804:2;:7;1797:14;;;1349:467;:::o;4454:159:7:-;4508:4;4541:1;4533:5;;:9;4532:38;;;;;4567:1;4548:21;;:7;;;;;;;;;;;:21;;;;4532:38;:73;;;;;4602:1;4575:29;;4583:6;;;;;;;;;;;4575:29;;;;4532:73;4524:82;;4454:159;:::o;5155:168::-;5280:1;5257:25;;:11;:25;;;;5249:34;;;;;;;;5314:1;5301:9;:14;;5293:23;;;;;;;;5155:168;;:::o;231:421:34:-;289:7;534:1;529;:6;525:45;;;558:1;551:8;;;;525:45;580:9;596:1;592;:5;580:17;;624:1;619;615;:5;;;;;;;;:10;607:19;;;;;;;;644:1;637:8;;;231:421;;;;;:::o;6047:137:7:-;6132:45;6152:11;6165;6132:6;;;;;;;;;;;:19;;;;:45;;;;;:::i;:::-;6047:137;;:::o;662:174:49:-;744:85;763:5;793;:14;;;:23;;;;818:2;822:5;770:58;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;770:58:49;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;770:58:49;744:18;:85::i;:::-;662:174;;;:::o;2487:869::-;3030:27;3038:5;3030:25;;;:27::i;:::-;3022:36;;;;;;;;3129:12;3143:23;3178:5;3170:19;;3190:4;3170:25;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;51:19;36:153;;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3170:25:49;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3128:67:49;;;;3213:7;3205:16;;;;;;;;3256:1;3236:10;:17;:21;3232:118;;;3319:10;3308:30;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3308:30:49;;;;;;;;;;;;;;;;3300:39;;;;;;;;3232:118;2487:869;;;;:::o;463:616:67:-;523:4;539:12;1038:7;1026:20;1018:28;;1071:1;1064:4;:8;1057:15;;;463:616;;;:::o",
  "source": "pragma solidity ^0.5.2;\n\nimport \"zos-lib/contracts/Initializable.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../validation/TimedCrowdsale.sol\";\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of TimedCrowdsale with a one-off finalization action, where one\n * can do extra work after finishing.\n */\ncontract FinalizableCrowdsale is Initializable, TimedCrowdsale {\n    using SafeMath for uint256;\n\n    bool private _finalized;\n\n    event CrowdsaleFinalized();\n\n    /**\n     * @return true if the crowdsale is finalized, false otherwise.\n     */\n    function finalized() public view returns (bool) {\n        return _finalized;\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     * work. Calls the contract's finalization function.\n     */\n    function finalize() public {\n        require(!_finalized);\n        require(hasClosed());\n\n        _finalized = true;\n\n        _finalization();\n        emit CrowdsaleFinalized();\n    }\n\n    /**\n     * @dev Can be overridden to add finalization logic. The overriding function\n     * should call super._finalization() to ensure the chain of finalization is\n     * executed entirely.\n     */\n    function _finalization() internal {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    uint256[50] private ______gap;\n}\n",
  "sourcePath": "/home/frangio/zs/oz/eth/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
  "ast": {
    "absolutePath": "/home/frangio/zs/oz/eth/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
    "exportedSymbols": {
      "FinalizableCrowdsale": [
        1179
      ]
    },
    "id": 1180,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1124,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "absolutePath": "zos-lib/contracts/Initializable.sol",
        "file": "zos-lib/contracts/Initializable.sol",
        "id": 1125,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 8439,
        "src": "25:45:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/zs/oz/eth/contracts/math/SafeMath.sol",
        "file": "../../math/SafeMath.sol",
        "id": 1126,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 4305,
        "src": "71:33:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/zs/oz/eth/contracts/crowdsale/validation/TimedCrowdsale.sol",
        "file": "../validation/TimedCrowdsale.sol",
        "id": 1127,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 2202,
        "src": "105:42:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1128,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8438,
              "src": "341:13:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$8438",
                "typeString": "contract Initializable"
              }
            },
            "id": 1129,
            "nodeType": "InheritanceSpecifier",
            "src": "341:13:8"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1130,
              "name": "TimedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2201,
              "src": "356:14:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TimedCrowdsale_$2201",
                "typeString": "contract TimedCrowdsale"
              }
            },
            "id": 1131,
            "nodeType": "InheritanceSpecifier",
            "src": "356:14:8"
          }
        ],
        "contractDependencies": [
          1122,
          2201,
          8382,
          8438
        ],
        "contractKind": "contract",
        "documentation": "@title FinalizableCrowdsale\n@dev Extension of TimedCrowdsale with a one-off finalization action, where one\ncan do extra work after finishing.",
        "fullyImplemented": true,
        "id": 1179,
        "linearizedBaseContracts": [
          1179,
          2201,
          1122,
          8382,
          8438
        ],
        "name": "FinalizableCrowdsale",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 1134,
            "libraryName": {
              "contractScope": null,
              "id": 1132,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4304,
              "src": "383:8:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$4304",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "377:27:8",
            "typeName": {
              "id": 1133,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "396:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 1136,
            "name": "_finalized",
            "nodeType": "VariableDeclaration",
            "scope": 1179,
            "src": "410:23:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1135,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "410:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1138,
            "name": "CrowdsaleFinalized",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1137,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "464:2:8"
            },
            "src": "440:27:8"
          },
          {
            "body": {
              "id": 1145,
              "nodeType": "Block",
              "src": "605:34:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1143,
                    "name": "_finalized",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1136,
                    "src": "622:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1142,
                  "id": 1144,
                  "nodeType": "Return",
                  "src": "615:17:8"
                }
              ]
            },
            "documentation": "@return true if the crowdsale is finalized, false otherwise.",
            "id": 1146,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalized",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1139,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "575:2:8"
            },
            "returnParameters": {
              "id": 1142,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1141,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1146,
                  "src": "599:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1140,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "599:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "598:6:8"
            },
            "scope": 1179,
            "src": "557:82:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1169,
              "nodeType": "Block",
              "src": "824:156:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "842:11:8",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 1150,
                          "name": "_finalized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1136,
                          "src": "843:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1149,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        8456,
                        8457
                      ],
                      "referencedDeclaration": 8456,
                      "src": "834:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1152,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "834:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1153,
                  "nodeType": "ExpressionStatement",
                  "src": "834:20:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1155,
                          "name": "hasClosed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2135,
                          "src": "872:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 1156,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "872:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1154,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        8456,
                        8457
                      ],
                      "referencedDeclaration": 8456,
                      "src": "864:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "864:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1158,
                  "nodeType": "ExpressionStatement",
                  "src": "864:20:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1161,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1159,
                      "name": "_finalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1136,
                      "src": "895:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 1160,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "908:4:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "895:17:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1162,
                  "nodeType": "ExpressionStatement",
                  "src": "895:17:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1163,
                      "name": "_finalization",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1174,
                      "src": "923:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "923:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1165,
                  "nodeType": "ExpressionStatement",
                  "src": "923:15:8"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1166,
                      "name": "CrowdsaleFinalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1138,
                      "src": "953:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1167,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "953:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1168,
                  "nodeType": "EmitStatement",
                  "src": "948:25:8"
                }
              ]
            },
            "documentation": "@dev Must be called after crowdsale ends, to do some extra finalization\nwork. Calls the contract's finalization function.",
            "id": 1170,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1147,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "814:2:8"
            },
            "returnParameters": {
              "id": 1148,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "824:0:8"
            },
            "scope": 1179,
            "src": "797:183:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1173,
              "nodeType": "Block",
              "src": "1223:64:8",
              "statements": []
            },
            "documentation": "@dev Can be overridden to add finalization logic. The overriding function\nshould call super._finalization() to ensure the chain of finalization is\nexecuted entirely.",
            "id": 1174,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_finalization",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1171,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1211:2:8"
            },
            "returnParameters": {
              "id": 1172,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1223:0:8"
            },
            "scope": 1179,
            "src": "1189:98:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1178,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 1179,
            "src": "1293:29:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 1175,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1293:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 1177,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 1176,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1301:2:8",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": null,
                  "typeString": null
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1293:11:8",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 1180,
        "src": "308:1017:8"
      }
    ],
    "src": "0:1326:8"
  },
  "legacyAST": {
    "absolutePath": "/home/frangio/zs/oz/eth/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
    "exportedSymbols": {
      "FinalizableCrowdsale": [
        1179
      ]
    },
    "id": 1180,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1124,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "absolutePath": "zos-lib/contracts/Initializable.sol",
        "file": "zos-lib/contracts/Initializable.sol",
        "id": 1125,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 8439,
        "src": "25:45:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/zs/oz/eth/contracts/math/SafeMath.sol",
        "file": "../../math/SafeMath.sol",
        "id": 1126,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 4305,
        "src": "71:33:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/zs/oz/eth/contracts/crowdsale/validation/TimedCrowdsale.sol",
        "file": "../validation/TimedCrowdsale.sol",
        "id": 1127,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 2202,
        "src": "105:42:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1128,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8438,
              "src": "341:13:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$8438",
                "typeString": "contract Initializable"
              }
            },
            "id": 1129,
            "nodeType": "InheritanceSpecifier",
            "src": "341:13:8"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1130,
              "name": "TimedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2201,
              "src": "356:14:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TimedCrowdsale_$2201",
                "typeString": "contract TimedCrowdsale"
              }
            },
            "id": 1131,
            "nodeType": "InheritanceSpecifier",
            "src": "356:14:8"
          }
        ],
        "contractDependencies": [
          1122,
          2201,
          8382,
          8438
        ],
        "contractKind": "contract",
        "documentation": "@title FinalizableCrowdsale\n@dev Extension of TimedCrowdsale with a one-off finalization action, where one\ncan do extra work after finishing.",
        "fullyImplemented": true,
        "id": 1179,
        "linearizedBaseContracts": [
          1179,
          2201,
          1122,
          8382,
          8438
        ],
        "name": "FinalizableCrowdsale",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 1134,
            "libraryName": {
              "contractScope": null,
              "id": 1132,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4304,
              "src": "383:8:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$4304",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "377:27:8",
            "typeName": {
              "id": 1133,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "396:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 1136,
            "name": "_finalized",
            "nodeType": "VariableDeclaration",
            "scope": 1179,
            "src": "410:23:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1135,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "410:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1138,
            "name": "CrowdsaleFinalized",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1137,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "464:2:8"
            },
            "src": "440:27:8"
          },
          {
            "body": {
              "id": 1145,
              "nodeType": "Block",
              "src": "605:34:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1143,
                    "name": "_finalized",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1136,
                    "src": "622:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1142,
                  "id": 1144,
                  "nodeType": "Return",
                  "src": "615:17:8"
                }
              ]
            },
            "documentation": "@return true if the crowdsale is finalized, false otherwise.",
            "id": 1146,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalized",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1139,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "575:2:8"
            },
            "returnParameters": {
              "id": 1142,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1141,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1146,
                  "src": "599:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1140,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "599:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "598:6:8"
            },
            "scope": 1179,
            "src": "557:82:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1169,
              "nodeType": "Block",
              "src": "824:156:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "842:11:8",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 1150,
                          "name": "_finalized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1136,
                          "src": "843:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1149,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        8456,
                        8457
                      ],
                      "referencedDeclaration": 8456,
                      "src": "834:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1152,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "834:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1153,
                  "nodeType": "ExpressionStatement",
                  "src": "834:20:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1155,
                          "name": "hasClosed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2135,
                          "src": "872:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 1156,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "872:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1154,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        8456,
                        8457
                      ],
                      "referencedDeclaration": 8456,
                      "src": "864:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "864:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1158,
                  "nodeType": "ExpressionStatement",
                  "src": "864:20:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1161,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1159,
                      "name": "_finalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1136,
                      "src": "895:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 1160,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "908:4:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "895:17:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1162,
                  "nodeType": "ExpressionStatement",
                  "src": "895:17:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1163,
                      "name": "_finalization",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1174,
                      "src": "923:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "923:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1165,
                  "nodeType": "ExpressionStatement",
                  "src": "923:15:8"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1166,
                      "name": "CrowdsaleFinalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1138,
                      "src": "953:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1167,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "953:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1168,
                  "nodeType": "EmitStatement",
                  "src": "948:25:8"
                }
              ]
            },
            "documentation": "@dev Must be called after crowdsale ends, to do some extra finalization\nwork. Calls the contract's finalization function.",
            "id": 1170,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1147,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "814:2:8"
            },
            "returnParameters": {
              "id": 1148,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "824:0:8"
            },
            "scope": 1179,
            "src": "797:183:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1173,
              "nodeType": "Block",
              "src": "1223:64:8",
              "statements": []
            },
            "documentation": "@dev Can be overridden to add finalization logic. The overriding function\nshould call super._finalization() to ensure the chain of finalization is\nexecuted entirely.",
            "id": 1174,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_finalization",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1171,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1211:2:8"
            },
            "returnParameters": {
              "id": 1172,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1223:0:8"
            },
            "scope": 1179,
            "src": "1189:98:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1178,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 1179,
            "src": "1293:29:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 1175,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1293:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 1177,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 1176,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1301:2:8",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": null,
                  "typeString": null
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1293:11:8",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 1180,
        "src": "308:1017:8"
      }
    ],
    "src": "0:1326:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.2+commit.1df8f40c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.0",
  "updatedAt": "2019-06-10T23:33:49.216Z",
  "devdoc": {
    "details": "Extension of TimedCrowdsale with a one-off finalization action, where one can do extra work after finishing.",
    "methods": {
      "buyTokens(address)": {
        "details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
        "params": {
          "beneficiary": "Recipient of the token purchase"
        }
      },
      "closingTime()": {
        "return": "the crowdsale closing time."
      },
      "finalize()": {
        "details": "Must be called after crowdsale ends, to do some extra finalization work. Calls the contract's finalization function."
      },
      "finalized()": {
        "return": "true if the crowdsale is finalized, false otherwise."
      },
      "hasClosed()": {
        "details": "Checks whether the period in which the crowdsale is open has already elapsed.",
        "return": "Whether crowdsale period has elapsed"
      },
      "initialize(uint256,address,address)": {
        "details": "The rate is the conversion between wei and the smallest and indivisible token unit. So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.",
        "params": {
          "rate": "Number of token units a buyer gets per wei",
          "token": "Address of the token being sold",
          "wallet": "Address where collected funds will be forwarded to"
        }
      },
      "initialize(uint256,uint256)": {
        "details": "Constructor, takes crowdsale opening and closing times.",
        "params": {
          "closingTime": "Crowdsale closing time",
          "openingTime": "Crowdsale opening time"
        }
      },
      "isOpen()": {
        "return": "true if the crowdsale is open, false otherwise."
      },
      "openingTime()": {
        "return": "the crowdsale opening time."
      },
      "rate()": {
        "return": "the number of token units a buyer gets per wei."
      },
      "token()": {
        "return": "the token being sold."
      },
      "wallet()": {
        "return": "the address where funds are collected."
      },
      "weiRaised()": {
        "return": "the amount of wei raised."
      }
    },
    "title": "FinalizableCrowdsale"
  },
  "userdoc": {
    "methods": {}
  }
}