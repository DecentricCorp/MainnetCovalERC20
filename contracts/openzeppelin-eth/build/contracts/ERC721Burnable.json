{
  "contractName": "ERC721Burnable",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506115fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d1576000357c0100000000000000000000000000000000000000000000000000000000900480636352211e1161008e5780636352211e1461030157806370a082311461036f5780638129fc1c146103c7578063a22cb465146103d1578063b88d4fde14610421578063e985e9c514610526576100d1565b806301ffc9a7146100d6578063081812fc1461013b578063095ea7b3146101a957806323b872dd146101f757806342842e0e1461026557806342966c68146102d3575b600080fd5b610121600480360360208110156100ec57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506105a2565b604051808215151515815260200191505060405180910390f35b6101676004803603602081101561015157600080fd5b810190808035906020019092919050505061060a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101f5600480360360408110156101bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061065b565b005b6102636004803603606081101561020d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107a0565b005b6102d16004803603606081101561027b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107c5565b005b6102ff600480360360208110156102e957600080fd5b81019080803590602001909291905050506107e6565b005b61032d6004803603602081101561031757600080fd5b8101908080359060200190929190505050610807565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103b16004803603602081101561038557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610885565b6040518082815260200191505060405180910390f35b6103cf610910565b005b61041f600480360360408110156103e757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610a36565b005b6105246004803603608081101561043757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561049e57600080fd5b8201836020820111156104b057600080fd5b803590602001918460018302840111640100000000831117156104d257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b72565b005b6105886004803603604081101561053c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b9a565b604051808215151515815260200191505060405180910390f35b600060336000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600061061582610c2e565b151561062057600080fd5b6067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061066682610807565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106a357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106e357506106e28133610b9a565b5b15156106ee57600080fd5b826067600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6107aa3382610ca0565b15156107b557600080fd5b6107c0838383610d35565b505050565b6107e18383836020604051908101604052806000815250610b72565b505050565b6107f03382610ca0565b15156107fb57600080fd5b61080481610efc565b50565b6000806066600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561087c57600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156108c257600080fd5b610909606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610f11565b9050919050565b600060019054906101000a900460ff168061092f575061092e610f1f565b5b8061094657506000809054906101000a900460ff16155b151561099d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806115a3602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055506109ed610f30565b610a196380ac58cd7c01000000000000000000000000000000000000000000000000000000000261104e565b80600060016101000a81548160ff02191690831515021790555050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610a7157600080fd5b80606960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b610b7d8484846107a0565b610b898484848461110c565b1515610b9457600080fd5b50505050565b6000606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806066600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600080610cac83610807565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d1b57508373ffffffffffffffffffffffffffffffffffffffff16610d038461060a565b73ffffffffffffffffffffffffffffffffffffffff16145b80610d2c5750610d2b8185610b9a565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610d5582610807565b73ffffffffffffffffffffffffffffffffffffffff16141515610d7757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610db357600080fd5b610dbc8161132f565b610e03606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206113ef565b610e4a606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611412565b816066600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b610f0e610f0882610807565b82611428565b50565b600081600001549050919050565b600080303b90506000811491505090565b600060019054906101000a900460ff1680610f4f5750610f4e610f1f565b5b80610f6657506000809054906101000a900460ff16155b1515610fbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806115a3602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055506110316301ffc9a77c01000000000000000000000000000000000000000000000000000000000261104e565b80600060016101000a81548160ff02191690831515021790555050565b63ffffffff7c010000000000000000000000000000000000000000000000000000000002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415151561109f57600080fd5b600160336000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600061112d8473ffffffffffffffffffffffffffffffffffffffff1661156d565b151561113c5760019050611327565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611233578082015181840152602081019050611218565b50505050905090810190601f1680156112605780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561128257600080fd5b505af1158015611296573d6000803e3d6000fd5b505050506040513d60208110156112ac57600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156113ec5760006067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6114076001826000015461158090919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b8173ffffffffffffffffffffffffffffffffffffffff1661144882610807565b73ffffffffffffffffffffffffffffffffffffffff1614151561146a57600080fd5b6114738161132f565b6114ba606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206113ef565b60006066600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b600082821115151561159157600080fd5b60008284039050809150509291505056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a7230582052d616b2eafc3fcf5f3c292f8d81f64082a3076df878eb5d7c871034b0a335770029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d1576000357c0100000000000000000000000000000000000000000000000000000000900480636352211e1161008e5780636352211e1461030157806370a082311461036f5780638129fc1c146103c7578063a22cb465146103d1578063b88d4fde14610421578063e985e9c514610526576100d1565b806301ffc9a7146100d6578063081812fc1461013b578063095ea7b3146101a957806323b872dd146101f757806342842e0e1461026557806342966c68146102d3575b600080fd5b610121600480360360208110156100ec57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506105a2565b604051808215151515815260200191505060405180910390f35b6101676004803603602081101561015157600080fd5b810190808035906020019092919050505061060a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101f5600480360360408110156101bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061065b565b005b6102636004803603606081101561020d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107a0565b005b6102d16004803603606081101561027b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107c5565b005b6102ff600480360360208110156102e957600080fd5b81019080803590602001909291905050506107e6565b005b61032d6004803603602081101561031757600080fd5b8101908080359060200190929190505050610807565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103b16004803603602081101561038557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610885565b6040518082815260200191505060405180910390f35b6103cf610910565b005b61041f600480360360408110156103e757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610a36565b005b6105246004803603608081101561043757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561049e57600080fd5b8201836020820111156104b057600080fd5b803590602001918460018302840111640100000000831117156104d257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b72565b005b6105886004803603604081101561053c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b9a565b604051808215151515815260200191505060405180910390f35b600060336000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600061061582610c2e565b151561062057600080fd5b6067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061066682610807565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106a357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106e357506106e28133610b9a565b5b15156106ee57600080fd5b826067600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6107aa3382610ca0565b15156107b557600080fd5b6107c0838383610d35565b505050565b6107e18383836020604051908101604052806000815250610b72565b505050565b6107f03382610ca0565b15156107fb57600080fd5b61080481610efc565b50565b6000806066600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561087c57600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156108c257600080fd5b610909606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610f11565b9050919050565b600060019054906101000a900460ff168061092f575061092e610f1f565b5b8061094657506000809054906101000a900460ff16155b151561099d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806115a3602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055506109ed610f30565b610a196380ac58cd7c01000000000000000000000000000000000000000000000000000000000261104e565b80600060016101000a81548160ff02191690831515021790555050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610a7157600080fd5b80606960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b610b7d8484846107a0565b610b898484848461110c565b1515610b9457600080fd5b50505050565b6000606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806066600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600080610cac83610807565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d1b57508373ffffffffffffffffffffffffffffffffffffffff16610d038461060a565b73ffffffffffffffffffffffffffffffffffffffff16145b80610d2c5750610d2b8185610b9a565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610d5582610807565b73ffffffffffffffffffffffffffffffffffffffff16141515610d7757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610db357600080fd5b610dbc8161132f565b610e03606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206113ef565b610e4a606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611412565b816066600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b610f0e610f0882610807565b82611428565b50565b600081600001549050919050565b600080303b90506000811491505090565b600060019054906101000a900460ff1680610f4f5750610f4e610f1f565b5b80610f6657506000809054906101000a900460ff16155b1515610fbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806115a3602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055506110316301ffc9a77c01000000000000000000000000000000000000000000000000000000000261104e565b80600060016101000a81548160ff02191690831515021790555050565b63ffffffff7c010000000000000000000000000000000000000000000000000000000002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415151561109f57600080fd5b600160336000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600061112d8473ffffffffffffffffffffffffffffffffffffffff1661156d565b151561113c5760019050611327565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611233578082015181840152602081019050611218565b50505050905090810190601f1680156112605780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561128257600080fd5b505af1158015611296573d6000803e3d6000fd5b505050506040513d60208110156112ac57600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156113ec5760006067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6114076001826000015461158090919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b8173ffffffffffffffffffffffffffffffffffffffff1661144882610807565b73ffffffffffffffffffffffffffffffffffffffff1614151561146a57600080fd5b6114738161132f565b6114ba606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206113ef565b60006066600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b600082821115151561159157600080fd5b60008284039050809150509291505056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a7230582052d616b2eafc3fcf5f3c292f8d81f64082a3076df878eb5d7c871034b0a335770029",
  "sourceMap": "201:346:53:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;201:346:53;;;;;;;",
  "deployedSourceMap": "201:346:53:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;201:346:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;855:131:29;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;855:131:29;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4012:151:52;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4012:151:52;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3435:292;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3435:292:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5568:180;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5568:180:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6381:132;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6381:132:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;382:127:53;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;382:127:53;;;;;;;;;;;;;;;;;:::i;:::-;;2837:177:52;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2837:177:52;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2459:160;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2459:160:52;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1922:205;;;:::i;:::-;;4455:213;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4455:213:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7218:211;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;7218:211:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7218:211:52;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7218:211:52;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7218:211:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7218:211:52;;;;;;;;;;;;;;;:::i;:::-;;4989:145;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4989:145:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;855:131:29;923:4;946:20;:33;967:11;946:33;;;;;;;;;;;;;;;;;;;;;;;;;;;939:40;;855:131;;;:::o;4012:151:52:-;4071:7;4098:16;4106:7;4098;:16::i;:::-;4090:25;;;;;;;;4132:15;:24;4148:7;4132:24;;;;;;;;;;;;;;;;;;;;;4125:31;;4012:151;;;:::o;3435:292::-;3498:13;3514:16;3522:7;3514;:16::i;:::-;3498:32;;3554:5;3548:11;;:2;:11;;;;3540:20;;;;;;;;3592:5;3578:19;;:10;:19;;;:58;;;;3601:35;3618:5;3625:10;3601:16;:35::i;:::-;3578:58;3570:67;;;;;;;;3675:2;3648:15;:24;3664:7;3648:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;3712:7;3708:2;3692:28;;3701:5;3692:28;;;;;;;;;;;;3435:292;;;:::o;5568:180::-;5658:39;5677:10;5689:7;5658:18;:39::i;:::-;5650:48;;;;;;;;5709:32;5723:4;5729:2;5733:7;5709:13;:32::i;:::-;5568:180;;;:::o;6381:132::-;6467:39;6484:4;6490:2;6494:7;6467:39;;;;;;;;;;;;;:16;:39::i;:::-;6381:132;;;:::o;382:127:53:-;438:39;457:10;469:7;438:18;:39::i;:::-;430:48;;;;;;;;488:14;494:7;488:5;:14::i;:::-;382:127;:::o;2837:177:52:-;2892:7;2911:13;2927:11;:20;2939:7;2927:20;;;;;;;;;;;;;;;;;;;;;2911:36;;2982:1;2965:19;;:5;:19;;;;2957:28;;;;;;;;3002:5;2995:12;;;2837:177;;;:::o;2459:160::-;2514:7;2558:1;2541:19;;:5;:19;;;;2533:28;;;;;;;;2578:34;:17;:24;2596:5;2578:24;;;;;;;;;;;;;;;:32;:34::i;:::-;2571:41;;2459:160;;;:::o;1922:205::-;1024:12:70;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;1973:19:52;:17;:19::i;:::-;2080:40;1288:10;2099:20;;2080:18;:40::i;:::-;1243:15:70;1228:12;;:30;;;;;;;;;;;;;;;;;;1922:205:52;:::o;4455:213::-;4540:10;4534:16;;:2;:16;;;;4526:25;;;;;;;;4598:8;4561:18;:30;4580:10;4561:30;;;;;;;;;;;;;;;:34;4592:2;4561:34;;;;;;;;;;;;;;;;:45;;;;;;;;;;;;;;;;;;4648:2;4621:40;;4636:10;4621:40;;;4652:8;4621:40;;;;;;;;;;;;;;;;;;;;;;4455:213;;:::o;7218:211::-;7324:31;7337:4;7343:2;7347:7;7324:12;:31::i;:::-;7373:48;7396:4;7402:2;7406:7;7415:5;7373:22;:48::i;:::-;7365:57;;;;;;;;7218:211;;;;:::o;4989:145::-;5069:4;5092:18;:25;5111:5;5092:25;;;;;;;;;;;;;;;:35;5118:8;5092:35;;;;;;;;;;;;;;;;;;;;;;;;;5085:42;;4989:145;;;;:::o;7623:152::-;7680:4;7696:13;7712:11;:20;7724:7;7712:20;;;;;;;;;;;;;;;;;;;;;7696:36;;7766:1;7749:19;;:5;:19;;;;7742:26;;;7623:152;;;:::o;8135:246::-;8220:4;8236:13;8252:16;8260:7;8252;:16::i;:::-;8236:32;;8297:5;8286:16;;:7;:16;;;:51;;;;8330:7;8306:31;;:20;8318:7;8306:11;:20::i;:::-;:31;;;8286:51;:87;;;;8341:32;8358:5;8365:7;8341:16;:32::i;:::-;8286:87;8278:96;;;8135:246;;;;:::o;10083:362::-;10196:4;10176:24;;:16;10184:7;10176;:16::i;:::-;:24;;;10168:33;;;;;;;;10233:1;10219:16;;:2;:16;;;;10211:25;;;;;;;;10247:23;10262:7;10247:14;:23::i;:::-;10281:35;:17;:23;10299:4;10281:23;;;;;;;;;;;;;;;:33;:35::i;:::-;10326:33;:17;:21;10344:2;10326:21;;;;;;;;;;;;;;;:31;:33::i;:::-;10393:2;10370:11;:20;10382:7;10370:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;10430:7;10426:2;10411:27;;10420:4;10411:27;;;;;;;;;;;;10083:362;;;:::o;9618:90::-;9669:32;9675:16;9683:7;9675;:16::i;:::-;9693:7;9669:5;:32::i;:::-;9618:90;:::o;1062:112:22:-;1127:7;1153;:14;;;1146:21;;1062:112;;;:::o;1349:467:70:-;1396:4;1737:10;1782:7;1770:20;1764:26;;1810:1;1804:2;:7;1797:14;;;1349:467;:::o;666:98:29:-;1024:12:70;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;717:40:29;297:10;736:20;;717:18;:40::i;:::-;1243:15:70;1228:12;;:30;;;;;;;;;;;;;;;;;;666:98:29;:::o;1065:158::-;1155:10;1140:25;;:11;:25;;;;;1132:34;;;;;;;;1212:4;1176:20;:33;1197:11;1176:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;1065:158;:::o;10973:347:52:-;11094:4;11119:15;:2;:13;;;:15::i;:::-;11118:16;11114:58;;;11157:4;11150:11;;;;11114:58;11182:13;11214:2;11198:36;;;11235:10;11247:4;11253:7;11262:5;11198:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11198:70:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11198:70:52;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11198:70:52;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11198:70:52;;;;;;;;;;;;;;;;11182:86;;774:10;11296:16;;11286:26;;;:6;:26;;;;11278:35;;;10973:347;;;;;;;:::o;11481:171::-;11580:1;11544:38;;:15;:24;11560:7;11544:24;;;;;;;;;;;;;;;;;;;;;:38;;;;11540:106;;;11633:1;11598:15;:24;11614:7;11598:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;11540:106;11481:171;:::o;1275:108:22:-;1355:21;1374:1;1355:7;:14;;;:18;;:21;;;;:::i;:::-;1338:7;:14;;:38;;;;1275:108;:::o;1180:89::-;1261:1;1243:7;:14;;;:19;;;;;;;;;;;1180:89;:::o;9156:283:52:-;9250:5;9230:25;;:16;9238:7;9230;:16::i;:::-;:25;;;9222:34;;;;;;;;9267:23;9282:7;9267:14;:23::i;:::-;9301:36;:17;:24;9319:5;9301:24;;;;;;;;;;;;;;;:34;:36::i;:::-;9378:1;9347:11;:20;9359:7;9347:20;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;9424:7;9420:1;9396:36;;9405:5;9396:36;;;;;;;;;;;;9156:283;;:::o;463:616:67:-;523:4;539:12;1038:7;1026:20;1018:28;;1071:1;1064:4;:8;1057:15;;;463:616;;;:::o;1211:145:34:-;1269:7;1301:1;1296;:6;;1288:15;;;;;;;;1313:9;1329:1;1325;:5;1313:17;;1348:1;1341:8;;;1211:145;;;;:::o",
  "source": "pragma solidity ^0.5.2;\n\nimport \"zos-lib/contracts/Initializable.sol\";\nimport \"./ERC721.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\ncontract ERC721Burnable is Initializable, ERC721 {\n    /**\n     * @dev Burns a specific ERC721 token.\n     * @param tokenId uint256 id of the ERC721 token to be burned.\n     */\n    function burn(uint256 tokenId) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n        _burn(tokenId);\n    }\n\n    uint256[50] private ______gap;\n}\n",
  "sourcePath": "/home/frangio/zs/oz/eth/contracts/token/ERC721/ERC721Burnable.sol",
  "ast": {
    "absolutePath": "/home/frangio/zs/oz/eth/contracts/token/ERC721/ERC721Burnable.sol",
    "exportedSymbols": {
      "ERC721Burnable": [
        7150
      ]
    },
    "id": 7151,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7121,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:53"
      },
      {
        "absolutePath": "zos-lib/contracts/Initializable.sol",
        "file": "zos-lib/contracts/Initializable.sol",
        "id": 7122,
        "nodeType": "ImportDirective",
        "scope": 7151,
        "sourceUnit": 8439,
        "src": "25:45:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/zs/oz/eth/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 7123,
        "nodeType": "ImportDirective",
        "scope": 7151,
        "sourceUnit": 7120,
        "src": "71:22:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7124,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8438,
              "src": "228:13:53",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$8438",
                "typeString": "contract Initializable"
              }
            },
            "id": 7125,
            "nodeType": "InheritanceSpecifier",
            "src": "228:13:53"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7126,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7119,
              "src": "243:6:53",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$7119",
                "typeString": "contract ERC721"
              }
            },
            "id": 7127,
            "nodeType": "InheritanceSpecifier",
            "src": "243:6:53"
          }
        ],
        "contractDependencies": [
          3860,
          4007,
          7119,
          8033,
          8438
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721 Burnable Token\n@dev ERC721 Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 7150,
        "linearizedBaseContracts": [
          7150,
          7119,
          8033,
          3860,
          4007,
          8438
        ],
        "name": "ERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 7144,
              "nodeType": "Block",
              "src": "420:89:53",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 7134,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8453,
                              "src": "457:3:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 7135,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "457:10:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 7136,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7129,
                            "src": "469:7:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 7133,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6899,
                          "src": "438:18:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 7137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "438:39:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 7132,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        8456,
                        8457
                      ],
                      "referencedDeclaration": 8456,
                      "src": "430:7:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 7138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "430:48:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7139,
                  "nodeType": "ExpressionStatement",
                  "src": "430:48:53"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7141,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7129,
                        "src": "494:7:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 7140,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        6984,
                        6997
                      ],
                      "referencedDeclaration": 6997,
                      "src": "488:5:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 7142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "488:14:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7143,
                  "nodeType": "ExpressionStatement",
                  "src": "488:14:53"
                }
              ]
            },
            "documentation": "@dev Burns a specific ERC721 token.\n@param tokenId uint256 id of the ERC721 token to be burned.",
            "id": 7145,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7130,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7129,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 7145,
                  "src": "396:15:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7128,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "396:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "395:17:53"
            },
            "returnParameters": {
              "id": 7131,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "420:0:53"
            },
            "scope": 7150,
            "src": "382:127:53",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 7149,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 7150,
            "src": "515:29:53",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 7146,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "515:7:53",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 7148,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 7147,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "523:2:53",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": null,
                  "typeString": null
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "515:11:53",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 7151,
        "src": "201:346:53"
      }
    ],
    "src": "0:548:53"
  },
  "legacyAST": {
    "absolutePath": "/home/frangio/zs/oz/eth/contracts/token/ERC721/ERC721Burnable.sol",
    "exportedSymbols": {
      "ERC721Burnable": [
        7150
      ]
    },
    "id": 7151,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7121,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:53"
      },
      {
        "absolutePath": "zos-lib/contracts/Initializable.sol",
        "file": "zos-lib/contracts/Initializable.sol",
        "id": 7122,
        "nodeType": "ImportDirective",
        "scope": 7151,
        "sourceUnit": 8439,
        "src": "25:45:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/zs/oz/eth/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 7123,
        "nodeType": "ImportDirective",
        "scope": 7151,
        "sourceUnit": 7120,
        "src": "71:22:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7124,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8438,
              "src": "228:13:53",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$8438",
                "typeString": "contract Initializable"
              }
            },
            "id": 7125,
            "nodeType": "InheritanceSpecifier",
            "src": "228:13:53"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7126,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7119,
              "src": "243:6:53",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$7119",
                "typeString": "contract ERC721"
              }
            },
            "id": 7127,
            "nodeType": "InheritanceSpecifier",
            "src": "243:6:53"
          }
        ],
        "contractDependencies": [
          3860,
          4007,
          7119,
          8033,
          8438
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721 Burnable Token\n@dev ERC721 Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 7150,
        "linearizedBaseContracts": [
          7150,
          7119,
          8033,
          3860,
          4007,
          8438
        ],
        "name": "ERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 7144,
              "nodeType": "Block",
              "src": "420:89:53",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 7134,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8453,
                              "src": "457:3:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 7135,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "457:10:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 7136,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7129,
                            "src": "469:7:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 7133,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6899,
                          "src": "438:18:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 7137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "438:39:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 7132,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        8456,
                        8457
                      ],
                      "referencedDeclaration": 8456,
                      "src": "430:7:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 7138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "430:48:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7139,
                  "nodeType": "ExpressionStatement",
                  "src": "430:48:53"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7141,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7129,
                        "src": "494:7:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 7140,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        6984,
                        6997
                      ],
                      "referencedDeclaration": 6997,
                      "src": "488:5:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 7142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "488:14:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7143,
                  "nodeType": "ExpressionStatement",
                  "src": "488:14:53"
                }
              ]
            },
            "documentation": "@dev Burns a specific ERC721 token.\n@param tokenId uint256 id of the ERC721 token to be burned.",
            "id": 7145,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7130,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7129,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 7145,
                  "src": "396:15:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7128,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "396:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "395:17:53"
            },
            "returnParameters": {
              "id": 7131,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "420:0:53"
            },
            "scope": 7150,
            "src": "382:127:53",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 7149,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 7150,
            "src": "515:29:53",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 7146,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "515:7:53",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 7148,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 7147,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "523:2:53",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": null,
                  "typeString": null
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "515:11:53",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 7151,
        "src": "201:346:53"
      }
    ],
    "src": "0:548:53"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.2+commit.1df8f40c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.0",
  "updatedAt": "2019-06-10T23:33:49.252Z",
  "devdoc": {
    "details": "ERC721 Token that can be irreversibly burned (destroyed).",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "burn(uint256)": {
        "details": "Burns a specific ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the ERC721 token to be burned."
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "ERC721 Burnable Token"
  },
  "userdoc": {
    "methods": {}
  }
}